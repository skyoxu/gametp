name: Release Pipeline - Dev to CI to Prod (Simplified)

on:
  push:
    branches: [main, release/*]
    tags: ['v*', 'ci-*']
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment'
        required: true
        default: 'staging'
        type: choice
        options: [staging, production]

permissions:
  contents: write
  actions: read

env:
  # Ensure native rebuilds (tree-sitter, node-gyp) compile against C++20 on Windows runners (ADR-0005)
  CL: '/std:c++20 /EHsc'
  CXXFLAGS: '-std=c++20'
  GYP_MSVS_ARGS: '/std:c++20'
  GYP_CXXFLAGS: '-std=c++20'
  GYP_MSVS_VERSION: '2022'
  npm_config_msvs_version: '2022'

defaults:
  run:
    shell: pwsh

jobs:
  prepare:
    name: Prepare
    runs-on: windows-latest
    defaults:
      run:
        shell: pwsh
    outputs:
      environment: ${{ steps.env.outputs.environment }}
    steps:
      - uses: actions/checkout@v4
      - id: env
        run: node scripts/ci/detect-release-environment.mjs
        env:
          INPUT_ENVIRONMENT: ${{ github.event.inputs.environment }}
          GITHUB_EVENT_NAME: ${{ github.event_name }}

  build:
    name: Build
    runs-on: windows-latest
    defaults:
      run:
        shell: pwsh
    needs: prepare
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v5.0.0
        with:
          node-version: '20'
          cache: 'npm'
      - name: Setup Python (for node-gyp)
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'
      - name: Install dependencies (with postinstall)
        uses: ./.github/actions/npm-install
        with:
          mode: full
      - name: Strip BOMs in config files
        run: node scripts/ci/fix-bom.cjs
      # Apply Electron Fuses early against node_modules/electron/dist/electron.exe
      # to ensure packaged binaries inherit production fuses. Only run on tags or
      # manual production dispatches to avoid slowing down normal pushes.
      - name: Apply Electron fuses (pre-package)
        if: ${{ github.ref_type == 'tag' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production') }}
        run: npm run security:fuses:prod
        env:
          NODE_ENV: production
      - name: Prepare release logs dir
        id: release_logs
        run: |
          $d = Get-Date -Format 'yyyy-MM-dd'
          $p = "logs/$d/release"
          New-Item -ItemType Directory -Force -Path $p | Out-Null
          "dir=$p" | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8
      - name: Initialize template (ensure builder config)
        run: npm run init:template
      - name: Ensure rollup native package (win32-x64)
        shell: pwsh
        run: |
          Write-Host "Checking @rollup/rollup-win32-x64-msvc availability..."
          node -e "require('@rollup/rollup-win32-x64-msvc')" 2>$null
          if ($LASTEXITCODE -ne 0) {
            Write-Warning "@rollup/rollup-win32-x64-msvc missing; installing no-save..."
            npm install @rollup/rollup-win32-x64-msvc --no-save --no-audit --fund=false
          } else {
            Write-Host "rollup native package available."
          }
      - name: Build (renderer + electron)
        run: |
          $dir = "${{ steps.release_logs.outputs.dir }}"
          if (-not (Test-Path -LiteralPath $dir)) { New-Item -ItemType Directory -Force -Path $dir | Out-Null }
          npm run build *>&1 | Tee-Object -FilePath (Join-Path $dir 'build.log')
        env:
          NODE_ENV: ${{ needs.prepare.outputs.environment }}
      - name: Package (dir, unpacked)
        if: ${{ github.ref_type == 'tag' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production') }}
        run: |
          $dir = "${{ steps.release_logs.outputs.dir }}"
          if (-not (Test-Path -LiteralPath $dir)) { New-Item -ItemType Directory -Force -Path $dir | Out-Null }
          npm run build:win:dir *>&1 | Tee-Object -FilePath (Join-Path $dir 'package-dir.log')
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Package (installer NSIS)
        if: ${{ github.ref_type == 'tag' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production') }}
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Continue'
          $dir = "${{ steps.release_logs.outputs.dir }}"
          if (-not (Test-Path -LiteralPath $dir)) { New-Item -ItemType Directory -Force -Path $dir | Out-Null }
          Start-Transcript -Path (Join-Path $dir 'nsis.log') -Append | Out-Null
          Write-Host "[release] Pre-installing NSIS to stabilize packaging..."
          try {
            choco install nsis -y --no-progress | Out-Host
          } catch {
            Write-Warning "Chocolatey NSIS install step reported an error; proceeding to attempt packaging regardless."
          }

          $global:LASTEXITCODE = 0
          Write-Host "[release] Running electron-builder (NSIS) - attempt #1"
          npm run build:win
          if ($LASTEXITCODE -ne 0) {
            Write-Warning "[release] NSIS packaging failed on first attempt (exit=$LASTEXITCODE). Clearing electron-builder cache and retrying..."
            $cacheDir = Join-Path $env:LOCALAPPDATA 'electron-builder\Cache'
            if (Test-Path -LiteralPath $cacheDir) {
              try {
                Remove-Item -LiteralPath $cacheDir -Recurse -Force -ErrorAction SilentlyContinue
                Write-Host "[release] Cleared cache: $cacheDir"
              } catch {
                Write-Warning "[release] Failed to clear cache at $cacheDir"
              }
            }
            $global:LASTEXITCODE = 0
            Write-Host "[release] Running electron-builder (NSIS) - attempt #2"
            npm run build:win
            if ($LASTEXITCODE -ne 0) {
              Write-Error "[release] NSIS packaging failed after retry (exit=$LASTEXITCODE). Aborting."
              exit $LASTEXITCODE
            }
          }
          Stop-Transcript | Out-Null
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Windows Signing (Azure Trusted Signing / Key Vault) - Placeholder (disabled by default)
      - name: Install AzureSignTool (if signing enabled)
        if: ${{ env.SIGN_WINDOWS == 'true' }}
        run: dotnet tool update --global AzureSignTool
      - name: Sign Windows artifacts (Azure Key Vault) [placeholder]
        if: ${{ env.SIGN_WINDOWS == 'true' }}
        shell: pwsh
        env:
          AZURE_KV_VAULT_URL: ${{ secrets.AZURE_KV_VAULT_URL }}
          AZURE_KV_TENANT_ID: ${{ secrets.AZURE_KV_TENANT_ID }}
          AZURE_KV_CLIENT_ID: ${{ secrets.AZURE_KV_CLIENT_ID }}
          AZURE_KV_CLIENT_SECRET: ${{ secrets.AZURE_KV_CLIENT_SECRET }}
          AZURE_KV_CERT_NAME: ${{ secrets.AZURE_KV_CERT_NAME }}
          TSA_URL: http://timestamp.digicert.com
        run: |
          $ErrorActionPreference = 'Stop'
          $files = Get-ChildItem -Path "dist-electron" -Recurse -Include *.exe,*.msi | Select-Object -ExpandProperty FullName
          if (!$files) { Write-Host "No Windows artifacts to sign"; exit 0 }
          foreach ($f in $files) {
            Write-Host "Signing $f"
            AzureSignTool sign `
              -kvu "$env:AZURE_KV_VAULT_URL" `
              -kvi "$env:AZURE_KV_TENANT_ID" `
              -kvc "$env:AZURE_KV_CLIENT_ID" `
              -kvs "$env:AZURE_KV_CLIENT_SECRET" `
              -kvcsp "$env:AZURE_KV_CERT_NAME" `
              -tr "$env:TSA_URL" `
              -td sha256 -fd sha256 `
              "$f"
          }
      - name: Verify signatures (signtool)
        if: ${{ env.SIGN_WINDOWS == 'true' }}
        shell: pwsh
        run: |
          $files = Get-ChildItem -Path "dist-electron" -Recurse -Include *.exe,*.msi | Select-Object -ExpandProperty FullName
          foreach ($f in $files) {
            Write-Host "Verifying $f"
            signtool.exe verify /pa /all "$f"
          }
      # Fuses already applied pre-package when packaging is enabled.
      # Keep a no-op summary when packaging is skipped for clarity.
      - name: Packaging skipped summary
        if: ${{ !(github.ref_type == 'tag' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')) }}
        run: |
          {
            echo "## Packaging Skipped";
            echo "No tag or production manual dispatch detected. Skipping Electron packaging and fuses.";
          } >> $env:GITHUB_STEP_SUMMARY
      - name: Check Sentry credentials (optional)
        id: sentry_check
        run: node scripts/ci/sentry-verify.mjs
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
      - name: Compute release version
        id: rel
        shell: pwsh
        run: |
          $pkg = Get-Content package.json | ConvertFrom-Json
          $version = if ($env:GITHUB_REF -like 'refs/tags/v*') {
            ($env:GITHUB_REF.Split('/')[-1]).TrimStart('v')
          } else { $pkg.version }
          Write-Output "version=$version" >> $env:GITHUB_OUTPUT
      - name: Create Sentry release and upload sourcemaps
        if: ${{ steps.sentry_check.outputs.token_present == 'true' && (github.ref_type == 'tag' || github.ref == 'refs/heads/main') }}
        shell: pwsh
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
        run: |
          $REL = "vitegame@${{ steps.rel.outputs.version }}"
          echo "Sentry release: $REL"
          node_modules/.bin/sentry-cli releases new "$REL"
          node_modules/.bin/sentry-cli releases set-commits "$REL" --auto
          node_modules/.bin/sentry-cli sourcemaps upload --org "$env:SENTRY_ORG" --project "$env:SENTRY_PROJECT" --release "$REL" --rewrite --url-prefix "~/" dist
          node_modules/.bin/sentry-cli releases finalize "$REL"
      - name: Generate CycloneDX SBOM (full)
        run: npx --yes @cyclonedx/cyclonedx-npm --output-file sbom.json --spec-version 1.5
      - name: Upload SBOM (CycloneDX)
        uses: actions/upload-artifact@v4
        with:
          name: sbom-cyclonedx
          path: sbom.json
          retention-days: 14
      - name: Generate CycloneDX SBOM (runtime only)
        run: npx --yes @cyclonedx/cyclonedx-npm --omit dev --output-file sbom-runtime.json --spec-version 1.5
      - name: Upload SBOM (runtime)
        uses: actions/upload-artifact@v4
        with:
          name: sbom-runtime-cyclonedx
          path: sbom-runtime.json
          retention-days: 14
      - name: Upload release logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: release-logs
          path: |
            ${{ steps.release_logs.outputs.dir }}/**
          retention-days: 14
      - run: node scripts/ci/archive-build-artifacts.mjs
      - uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: artifacts/build.zip
      - name: Upload packaged Electron artifacts
        if: ${{ always() && (github.ref_type == 'tag' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')) && (hashFiles('electron-dist/**') != '' || hashFiles('dist-electron/**') != '') }}
        uses: actions/upload-artifact@v4
        with:
          name: dist-electron
          path: |
            electron-dist/**
            dist-electron/**
          retention-days: 14

  summary:
    name: Summary
    runs-on: windows-latest
    defaults:
      run:
        shell: pwsh
    needs: build
    steps:
      - run: Write-Output "Release build completed"
