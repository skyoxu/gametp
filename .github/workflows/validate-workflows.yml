name: Validate Workflows & Guards

on:
  pull_request:
    branches: [main, develop]
    paths:
      - '.github/workflows/**'
      - 'scripts/ci/workflow-consistency-check.mjs'
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      reason:
        description: 'Manual trigger reason'
        required: false
        type: string

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  actionlint:
    name: Lint workflow YAML (actionlint)
    runs-on: windows-latest
    defaults:
      run:
        shell: pwsh
    steps:
      - uses: actions/checkout@v4
      - name: Ensure shellcheck (Windows fallback)
        if: runner.os == 'Windows'
        shell: python
        run: |
          import os
          import pathlib
          import urllib.request
          import zipfile

          install_dir = pathlib.Path(os.environ["RUNNER_TEMP"]) / 'shellcheck'
          target = install_dir / 'shellcheck.exe'
          if not target.exists():
              install_dir.mkdir(parents=True, exist_ok=True)
              version = os.environ.get('SHELLCHECK_VERSION', 'v0.10.0')
              url = f'https://github.com/koalaman/shellcheck/releases/download/{version}/shellcheck-{version}.zip'
              archive_path = install_dir / 'shellcheck.zip'
              urllib.request.urlretrieve(url, archive_path)
              with zipfile.ZipFile(archive_path) as archive:
                  candidate = next((name for name in archive.namelist() if name.lower().endswith('shellcheck.exe')), None)
                  if candidate is None:
                      raise RuntimeError('shellcheck.exe not found in archive')
                  with archive.open(candidate) as source, open(target, 'wb') as dest:
                      dest.write(source.read())
              os.chmod(target, 0o755)
          with open(os.environ['GITHUB_PATH'], 'a', encoding='utf-8') as path_file:
              path_file.write(str(install_dir) + os.linesep)
          print(f'shellcheck ready at {target}')
      - name: Run actionlint
        uses: raven-actions/actionlint@v2

  actionlint-windows:
    name: Lint workflow YAML (actionlint, Windows)
    runs-on: windows-latest
    defaults:
      run:
        shell: pwsh
    steps:
      - uses: actions/checkout@v4
      - name: Ensure shellcheck (Windows fallback)
        if: runner.os == 'Windows'
        shell: python
        run: |
          import os
          import pathlib
          import urllib.request
          import zipfile

          install_dir = pathlib.Path(os.environ["RUNNER_TEMP"]) / 'shellcheck'
          target = install_dir / 'shellcheck.exe'
          if not target.exists():
              install_dir.mkdir(parents=True, exist_ok=True)
              version = os.environ.get('SHELLCHECK_VERSION', 'v0.10.0')
              url = f'https://github.com/koalaman/shellcheck/releases/download/{version}/shellcheck-{version}.zip'
              archive_path = install_dir / 'shellcheck.zip'
              urllib.request.urlretrieve(url, archive_path)
              with zipfile.ZipFile(archive_path) as archive:
                  candidate = next((name for name in archive.namelist() if name.lower().endswith('shellcheck.exe')), None)
                  if candidate is None:
                      raise RuntimeError('shellcheck.exe not found in archive')
                  with archive.open(candidate) as source, open(target, 'wb') as dest:
                      dest.write(source.read())
              os.chmod(target, 0o755)
          with open(os.environ['GITHUB_PATH'], 'a', encoding='utf-8') as path_file:
              path_file.write(str(install_dir) + os.linesep)
          print(f'shellcheck ready at {target}')
      - name: Run actionlint (Windows)
        uses: raven-actions/actionlint@v2

  needs-guard:
    name: Check jobs/needs consistency
    runs-on: windows-latest
    defaults:
      run:
        shell: pwsh
    needs: [actionlint, actionlint-windows]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v5.0.0
        with:
          node-version: '20'
      - name: Step
        run: node scripts/ci/workflow-consistency-check.mjs

  encoding-guard:
    name: Enforce UTF-8 + LF for workflows
    runs-on: windows-latest
    defaults:
      run:
        shell: pwsh
    needs: [actionlint, actionlint-windows]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v5.0.0
        with:
          node-version: '20'
      - name: Check workflow encodings and EOL
        run: node scripts/ci/check-workflows-encoding.mjs

  encoding-guard-windows:
    name: Enforce UTF-8 + LF for workflows (Windows)
    runs-on: windows-latest
    defaults:
      run:
        shell: pwsh
    needs: [actionlint, actionlint-windows]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v5.0.0
        with:
          node-version: '20'
      - name: Check workflow encodings and EOL (Windows)
        run: node scripts/ci/check-workflows-encoding.mjs

  shell-guard:
    name: Enforce Windows-only shell policy
    runs-on: windows-latest
    defaults:
      run:
        shell: pwsh
    needs:
      [actionlint, actionlint-windows, encoding-guard, encoding-guard-windows]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v5.0.0
        with:
          node-version: '20'
      - name: Check pwsh defaults on Windows jobs and POSIX test misuse
        run: node scripts/ci/workflow-shell-guard.mjs

  windows-only-guard:
    name: Enforce Windows-only guard (no bash/.sh/non-Windows runners)
    runs-on: windows-latest
    defaults:
      run:
        shell: pwsh
    needs:
      [shell-guard]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v5.0.0
        with:
          node-version: '20'
      - name: Scan for bash/shell scripts/non-Windows runners
        run: node scripts/ci/windows-only-guard.mjs
        env:
          GITHUB_EVENT_NAME: ${{ github.event_name }}
          PR_LABELS: ${{ github.event.pull_request && join(github.event.pull_request.labels.*.name, ',') || '' }}
          WINDOWS_ONLY_GUARD_WAIVE_LABELS: windows-guard-waive,size-waive

  ascii-guard:
    name: ASCII Guard for Workflows
    runs-on: windows-latest
    defaults:
      run:
        shell: pwsh
    needs:
      [actionlint, actionlint-windows, encoding-guard, encoding-guard-windows]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v5.0.0
        with:
          node-version: '20'
      - name: Check non-ASCII characters in workflow files
        run: node scripts/ci/guard-workflows-ascii.mjs

  docs-shell-scan:
    name: Docs shell scanner (bash fences)
    runs-on: windows-latest
    defaults:
      run:
        shell: pwsh
    needs: [shell-guard]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v5.0.0
        with:
          node-version: '20'
      - name: Scan docs for bash code fences
        run: node scripts/ci/docs-shell-scan.mjs

  docs-shell-pr-gate:
    name: Docs shell PR light gate
    runs-on: windows-latest
    if: github.event_name == 'pull_request'
    defaults:
      run:
        shell: pwsh
    needs: [shell-guard]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v5.0.0
        with:
          node-version: '20'
      - name: Run docs shell light gate (PR)
        run: node scripts/ci/docs-shell-pr-gate.mjs

