name: Build & Test

on:
  workflow_dispatch:
    inputs:
      reason:
        description: 'Manual trigger reason'
        required: false
        type: string
  pull_request:
  push:
    branches: [main]
    paths:
      - 'src/**'
      - 'electron/**'
      - 'tests/**'
      - 'scripts/**'
      - 'package.json'
      - 'package-lock.json'
      - 'tsconfig*.json'
      - 'vite.config.ts'
      - 'vitest.config.ts'
      - 'playwright.config.ts'
      - '.github/actions/**'
      - '.github/workflows/**'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-artifacts:
    runs-on: windows-latest
    defaults:
      run:
        shell: pwsh
    outputs:
      artifacts-available: ${{ steps.build-check.outputs.artifacts-available }}
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-node@v6.0.0
        with:
          node-version: '22.x'
          cache: 'npm'
      - name: Install dependencies (hardened)
        uses: ./.github/actions/npm-install
        with:
          mode: lean
      - name: Setup Python 3.x (for pre-fix tools if needed)
        uses: actions/setup-python@v6
        with:
          python-version: '3.x'
      - name: Run postinstall patches (explicit)
        run: node scripts/ci/patch-tree-sitter.js
      - name: Ensure rollup native package (win32-x64)
        shell: pwsh
        run: |
          Write-Host "Checking @rollup/rollup-win32-x64-msvc availability (unit job)..."
          node -e "require('@rollup/rollup-win32-x64-msvc')" 2>$null
          if ($LASTEXITCODE -ne 0) {
            Write-Warning "@rollup/rollup-win32-x64-msvc missing; installing no-save..."
            npm install @rollup/rollup-win32-x64-msvc --no-save --no-audit --fund=false
          } else {
            Write-Host "rollup native package available."
          }
      - name: Strip BOMs in config files
        run: node scripts/ci/fix-bom.cjs
      - name: Ensure rollup native package (win32-x64)
        shell: pwsh
        run: |
          Write-Host "Checking @rollup/rollup-win32-x64-msvc availability..."
          node -e "require('@rollup/rollup-win32-x64-msvc')" 2>$null
          if ($LASTEXITCODE -ne 0) {
            Write-Warning "@rollup/rollup-win32-x64-msvc missing; installing no-save..."
            npm install @rollup/rollup-win32-x64-msvc --no-save --no-audit --fund=false
          } else {
            Write-Host "rollup native package available."
          }
      - name: Build application (capture log)
        env:
          VITE_E2E_SMOKE: 'true'
        run: |
          $d = Get-Date -Format 'yyyy-MM-dd'
          New-Item -ItemType Directory -Force -Path "logs/$d/build" | Out-Null
          npm run build *>&1 | Tee-Object -FilePath "logs/$d/build/build.log"
      - name: Upload build logs
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs
          path: logs/*/build/**
          if-no-files-found: warn
          retention-days: 7
      - name: Verify build outputs
        id: build-check
        run: |
          if ((Test-Path -LiteralPath 'dist') -and (Test-Path -LiteralPath 'dist-electron')) {
            Write-Host "Build artifacts verified: dist/ and dist-electron/ directories exist"
            echo "artifacts-available=true" >> $env:GITHUB_OUTPUT
          } else {
            Write-Error "[FAIL] Build artifacts missing: dist/ or dist-electron/ not found"
            echo "artifacts-available=false" >> $env:GITHUB_OUTPUT
            exit 1
          }
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            dist/
            dist-electron/
          retention-days: 1
          compression-level: 6
          include-hidden-files: false

  build-and-unit:
    needs: build-artifacts
    runs-on: windows-latest
    defaults:
      run:
        shell: pwsh
    env:
      # Relax EventBus perf thresholds on Windows CI to reduce false reds; tighten later
      EVTBUS_1000_SUBS_MS: '2000'
      EVTBUS_100_PUBS_MS: '1000'
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-node@v6.0.0
        with:
          node-version: '22.x'
          cache: 'npm'
      - name: Install dependencies (hardened)
        uses: ./.github/actions/npm-install
        with:
          mode: lean
      - name: Run postinstall patches (explicit)
        run: node scripts/ci/patch-tree-sitter.js
      - name: Setup Python 3.x (for pre-fix tools)
        uses: actions/setup-python@v6
        with:
          python-version: '3.x'
      - name: ESLint pre-fix (non-blocking)
        if: runner.os == 'Windows'
        id: eslint_prefx
        uses: ./.github/actions/eslint-prefx
      - name: Upload ESLint pre-fix logs
        if: always() && runner.os == 'Windows' && steps.eslint_prefx.outputs.logs-dir != ''
        uses: actions/upload-artifact@v4
        with:
          name: eslint-pre-fix-logs
          path: ${{ steps.eslint_prefx.outputs.logs-dir }}
          if-no-files-found: warn
          retention-days: 7
      - name: Upload ESLint pre-fix logs (fallback glob)
        if: always() && runner.os == 'Windows' && steps.eslint_prefx.outputs.logs-dir == ''
        uses: actions/upload-artifact@v4
        with:
          name: eslint-pre-fix-logs-fallback
          path: logs/*/eslint
          if-no-files-found: warn
          retention-days: 7
      - name: Lint
        run: npm run lint
        continue-on-error: true
      - name: Typecheck
        run: npm run typecheck
      - name: Ensure rollup native package (win32-x64) for tests
        shell: pwsh
        run: |
          Write-Host "Checking @rollup/rollup-win32-x64-msvc availability (coverage job)..."
          node -e "require('@rollup/rollup-win32-x64-msvc')" 2>$null
          if ($LASTEXITCODE -ne 0) {
            Write-Warning "@rollup/rollup-win32-x64-msvc missing; installing no-save..."
            npm install @rollup/rollup-win32-x64-msvc --no-save --no-audit --fund=false
          } else {
            Write-Host "rollup native package available."
          }
      - name: Unit tests with coverage gate
        env:
          COVERAGE_MODE: development
          NODE_ENV: test
          EVTBUS_1000_SUBS_MS: '2000'
          EVTBUS_100_PUBS_MS: '1000'
        run: npm run test:coverage:gate
      - name: Publish coverage summary
        if: always()
        run: |
          if (Test-Path -LiteralPath 'coverage/coverage-summary.json') {
            $summary = Get-Content -Raw -LiteralPath 'coverage/coverage-summary.json' | ConvertFrom-Json
            $t = $summary.total
            $lines = """
            ## Coverage Summary
            - Lines: $($t.lines.pct)%
            - Statements: $($t.statements.pct)%
            - Functions: $($t.functions.pct)%
            - Branches: $($t.branches.pct)%
            """
            Add-Content -Path $env:GITHUB_STEP_SUMMARY -Value $lines
          } else {
            Add-Content -Path $env:GITHUB_STEP_SUMMARY -Value "Coverage summary not found."
          }

  e2e-perf-smoke:
    needs: [build-artifacts, build-and-unit]
    runs-on: windows-latest
    defaults:
      run:
        shell: pwsh
    env:
      CI: 'true'
      VITE_E2E_SMOKE: 'true'
      ELECTRON_ENABLE_LOGGING: '1'
      ELECTRON_DISABLE_GPU: '1'
      E2E_SECURITY_TIMEOUT_MS: 300000
      CI_ARTIFACTS_AVAILABLE: 'true'
      E2E_AUTO_START: '1'
      PERF_GATE_MODE: ${{ github.event_name == 'pull_request' && 'soft' || '' }}
      PERF_SAMPLE_COUNT: ${{ github.event_name == 'pull_request' && '10' || '20' }}
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-node@v6.0.0
        with:
          node-version: '22.x'
          cache: 'npm'
      - name: Setup Python 3.x (node-gyp builds)
        uses: actions/setup-python@v6
        with:
          python-version: '3.x'
      - name: Detect changes for E2E
        id: changes-e2e
        uses: tj-actions/changed-files@v47
        with:
          files: |
            src/**
            tests/e2e/**
            playwright.config.ts
      - name: E2E trigger context
        run: |
          Write-Host ("any_changed={0}" -f ('${{ steps.changes-e2e.outputs.any_changed }}'))
          Write-Host ("event={0} ref={1}" -f $env:GITHUB_EVENT_NAME, $env:GITHUB_REF)
      - name: Install deps (with postinstall)
        if: steps.changes-e2e.outputs.any_changed == 'true' || github.ref == 'refs/heads/main'
        uses: ./.github/actions/npm-install
        with:
          mode: lean
      - name: Ensure rollup native package (win32-x64) present
        if: steps.changes-e2e.outputs.any_changed == 'true' || github.ref == 'refs/heads/main'
        shell: pwsh
        run: |
          Write-Host "Checking @rollup/rollup-win32-x64-msvc availability..."
          node -e "require('@rollup/rollup-win32-x64-msvc')" 2>$null
          if ($LASTEXITCODE -ne 0) {
            Write-Warning "@rollup/rollup-win32-x64-msvc missing; installing no-save..."
            npm install @rollup/rollup-win32-x64-msvc --no-save --no-audit --fund=false
          } else {
            Write-Host "rollup native package available."
          }
      - name: Run postinstall patches (explicit)
        if: steps.changes-e2e.outputs.any_changed == 'true' || github.ref == 'refs/heads/main'
        run: node scripts/ci/patch-tree-sitter.js
      - name: Download build artifacts
        if: steps.changes-e2e.outputs.any_changed == 'true' || github.ref == 'refs/heads/main'
        uses: actions/download-artifact@v6
        with:
          name: build-artifacts
          path: .
      - name: Verify downloaded artifacts (fallback to local build)
        if: steps.changes-e2e.outputs.any_changed == 'true' || github.ref == 'refs/heads/main'
        run: |
          Write-Host "Verifying downloaded build artifacts..."
          $hasDist = Test-Path -LiteralPath 'dist'
          $hasElectron = Test-Path -LiteralPath 'dist-electron/electron/main.js'
          if ($hasDist -and $hasElectron) {
            Write-Host "Build artifacts present: dist/ and dist-electron/electron/main.js"
          } else {
            Write-Warning "Artifacts missing; building locally as fallback..."
            npm run build
            if (-not (Test-Path -LiteralPath 'dist') -or -not (Test-Path -LiteralPath 'dist-electron/electron/main.js')) {
              Write-Error "[FAIL] Local build fallback did not produce required outputs"
              exit 1
            }
          }
      - name: Validate E2E timeout config (fail-fast)
        if: steps.changes-e2e.outputs.any_changed == 'true' || github.ref == 'refs/heads/main'
        run: |
          $raw = $env:E2E_SECURITY_TIMEOUT_MS
          if ([string]::IsNullOrWhiteSpace($raw)) {
            Write-Error "E2E_SECURITY_TIMEOUT_MS is not set"
            exit 1
          }
          $val = 0
          if (-not [int]::TryParse($raw, [ref]$val)) {
            Write-Error "E2E_SECURITY_TIMEOUT_MS is not a valid integer: $raw"
            exit 1
          }
          if ($val -lt 60000 -or $val -gt 900000) {
            Write-Error "E2E_SECURITY_TIMEOUT_MS out of range [60000,900000]: $val"
            exit 1
          }
          Write-Host "[config-check] E2E_SECURITY_TIMEOUT_MS=$val (valid)"
      - name: Cache Playwright browsers
        if: steps.changes-e2e.outputs.any_changed == 'true' || github.ref == 'refs/heads/main'
        uses: actions/cache@v4.3.0
        with:
          path: ~\AppData\Local\ms-playwright
          key: playwright-${{ runner.os }}-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            playwright-${{ runner.os }}-
      - name: Dependency Probe (Electron + Playwright)
        if: steps.changes-e2e.outputs.any_changed == 'true' || github.ref == 'refs/heads/main'
        run: |
          pwsh -File scripts/ci/electron-deps-probe.ps1
      - name: Setup Playwright browsers cache
        if: steps.changes-e2e.outputs.any_changed == 'true' || github.ref == 'refs/heads/main'
        uses: microsoft/playwright-github-action@v1
      - name: Repair/Prewarm Electron binary (Windows)
        if: steps.changes-e2e.outputs.any_changed == 'true' || github.ref == 'refs/heads/main'
        shell: pwsh
        run: |
          Write-Host "[prewarm] Ensuring Electron is correctly installed (no install.js recovery at runtime)."
          # Resolve requested version from package.json (dev or prod deps)
          $ver = node -p "(()=>{try{const p=require('./package.json');return (p.devDependencies&&p.devDependencies.electron)||p.dependencies.electron||''}catch(e){return ''}})()"
          if ([string]::IsNullOrWhiteSpace($ver)) { $ver = 'latest' }
          
          function Ensure-Electron {
            Write-Host "[prewarm] Running electron/install.js ..."
            node node_modules/electron/install.js 2>$null
            node -e "require('electron'); console.log('electron ok')" 2>$null
            return $LASTEXITCODE -eq 0
          }
          
          $ok = $false
          # Initial try: if require('electron') fails, attempt install.js
          node -e "require('electron'); console.log('electron ok')" 2>$null
          if ($LASTEXITCODE -eq 0) { $ok = $true } else { $ok = (Ensure-Electron) }
          
          # If still not ok, reinstall electron package (no-save) and run install.js again
          if (-not $ok) {
            Write-Warning "[prewarm] Electron not healthy; reinstalling electron@$ver (no-save)..."
            try { Remove-Item -Recurse -Force node_modules/electron -ErrorAction SilentlyContinue } catch {}
            npm install electron@$ver --no-save --no-audit --fund=false
            $ok = (Ensure-Electron)
          }
          
          if (-not $ok) {
            Write-Error "[prewarm] Electron installation could not be repaired. Aborting e2e perf smoke."
            exit 1
          } else {
            Write-Host "[prewarm] Electron ready."
          }
      - name: Run perf smoke (Electron)
        if: steps.changes-e2e.outputs.any_changed == 'true' || github.ref == 'refs/heads/main'
        run: npm run test:e2e:perf-smoke
      - name: Run scene-transition (Electron)
        if: steps.changes-e2e.outputs.any_changed == 'true' || github.ref == 'refs/heads/main'
        run: npm run test:e2e:scene-transition
      - name: Collect Playwright traces
        if: always()
        run: npm run collect:traces
      - name: Upload perf logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: perf-logs
          path: |
            logs/perf/
            logs/playwright-traces/
          retention-days: 7
      - name: Publish E2E perf P95 summary
        if: always() && (steps.changes-e2e.outputs.any_changed == 'true' || github.ref == 'refs/heads/main')
        shell: pwsh
        run: |
          if (Test-Path -LiteralPath 'test-results/test-results.json') {
            $json = Get-Content -Raw -LiteralPath 'test-results/test-results.json' | ConvertFrom-Json
            $durations = New-Object System.Collections.Generic.List[double]
            function Collect($n) {
              if ($null -ne $n.suites) { foreach ($s in $n.suites) { Collect $s } }
              if ($null -ne $n.specs) {
                foreach ($sp in $n.specs) {
                  foreach ($t in $sp.tests) {
                    foreach ($res in $t.results) {
                      if ($null -ne $res.duration) { [void]$durations.Add([double]$res.duration) }
                    }
                  }
                }
              }
            }
            Collect $json
            if ($durations.Count -gt 0) {
              $durations.Sort()
              function Pct([double[]]$arr, [double]$p) { $idx=[math]::Floor(($arr.Length-1)*$p); return [int]$arr[$idx] }
              $p50 = Pct $durations 0.5
              $p90 = Pct $durations 0.9
              $p95 = Pct $durations 0.95
              $p99 = Pct $durations 0.99
              $avg = [math]::Round(($durations | Measure-Object -Average).Average,2)
              $max = [int]($durations[-1])
              $lines = """
              ## E2E Perf (Playwright)
              - samples: $($durations.Count)
              - p50: $p50 ms
              - p90: $p90 ms
              - p95: $p95 ms
              - p99: $p99 ms
              - avg: $avg ms
              - max: $max ms
              """
              Add-Content -Path $env:GITHUB_STEP_SUMMARY -Value $lines
            } else {
              Add-Content -Path $env:GITHUB_STEP_SUMMARY -Value "No E2E durations found to compute P95."
            }
          } else {
            Add-Content -Path $env:GITHUB_STEP_SUMMARY -Value "No Playwright JSON report at test-results/test-results.json."
          }

      - name: Collect Playwright traces to logs/
        if: always() && (steps.changes-e2e.outputs.any_changed == 'true' || github.ref == 'refs/heads/main')
        run: npm run collect:traces

      - name: Upload Playwright traces (logs/playwright-traces)
        if: always() && (steps.changes-e2e.outputs.any_changed == 'true' || github.ref == 'refs/heads/main')
        uses: actions/upload-artifact@v4
        with:
          name: playwright-traces
          path: logs/playwright-traces/
          if-no-files-found: warn
          retention-days: 30

      - name: Comment PR with Playwright traces summary
        if: always() && steps.changes-e2e.outputs.any_changed == 'true' && github.event_name == 'pull_request' && github.event.pull_request.head.repo.fork == false
        uses: actions/github-script@v8
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const path = require('path');
            const base = path.join(process.cwd(), 'logs', 'playwright-traces');
            function latestDateDir() {
              if (!fs.existsSync(base)) return null;
              const dirs = fs.readdirSync(base).filter(d => {
                try { return fs.statSync(path.join(base, d)).isDirectory(); } catch { return false; }
              }).sort().reverse();
              return dirs[0] ? path.join(base, dirs[0]) : null;
            }
            function loadManifest(dir) {
              if (!dir) return null;
              const file = path.join(dir, 'trace-manifest.json');
              if (!fs.existsSync(file)) return null;
              try { return JSON.parse(fs.readFileSync(file, 'utf8')); } catch { return null; }
            }
            const dir = latestDateDir();
            const manifest = loadManifest(dir);
            if (!manifest || !Array.isArray(manifest.entries) || !manifest.entries.length) {
              core.notice('No trace manifest found to comment');
              return;
            }
            const rel = p => path.relative(process.cwd(), p).replace(/\\/g, '/');
            const head = manifest.entries.slice(0, 10).map((e, i) => `- ${i+1}. ${rel(e.target)} (${Math.round((e.size||0)/1024)} kB)`);
            const example = rel(manifest.entries[0].target);
            const body = [
              '### [TRACE] Playwright Traces (auto-collected)',
              '',
              '**How to replay (locally):**',
              '1. Download the "playwright-traces" artifact from this workflow run',
              `2. Run: \`npx playwright show-trace ${example}\``,
              '',
              '**Latest traces (top 10):**',
              ...head,
            ].join('\n');
            const pr = context.payload.pull_request?.number;
            if (!pr) { core.notice('No PR context available'); return; }
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr,
              body,
            });
      - name: Upload Playwright artifacts
        if: failure() && (steps.changes-e2e.outputs.any_changed == 'true' || github.ref == 'refs/heads/main')
        uses: actions/upload-artifact@v4
        with:
          name: playwright-results
          path: |
            test-results/**
            test-results/playwright-report/**
          if-no-files-found: warn
      - name: Skip E2E (no changes detected)
        if: steps.changes-e2e.outputs.any_changed != 'true' && github.ref != 'refs/heads/main'
        run: |
          Add-Content -Path $env:GITHUB_STEP_SUMMARY -Value "E2E perf smoke skipped: no relevant changes (src/**, tests/e2e/**, playwright.config.ts)."
# ci-noop-trigger: 2025-10-12T16:15:03Z
