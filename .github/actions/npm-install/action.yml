name: 'Windows-Focused npm Install'
description: 'Optimized npm installation for Windows-based CI/CD systems'
author: 'CI/CD Team'

inputs:
  working-directory:
    description: 'Working directory'
    required: false
    default: '.'
  node-version:
    description: 'Node.js version'
    required: false
    default: '20.x'

# Outputs removed to avoid referencing non-existent step IDs
# Use npm --version and node --version if version info is needed

runs:
  using: 'composite'
  steps:
    - name: Validate Node.js environment
      shell: pwsh
      working-directory: ${{ inputs.working-directory }}
      run: |
        Write-Host "Validating Node.js environment setup..."
        if (-not (Get-Command node -ErrorAction SilentlyContinue)) {
          Write-Error "Node.js not found. Ensure actions/setup-node has run."
          exit 1
        }
        if (-not (Get-Command npm -ErrorAction SilentlyContinue)) {
          Write-Error "npm not found. Node.js installation may be incomplete."
          exit 1
        }
        Write-Host ("Node.js version: {0}" -f (node --version))
        Write-Host ("npm version: {0}" -f (npm --version))

    - name: Validate environment variables
      shell: pwsh
      working-directory: ${{ inputs.working-directory }}
      run: |
        Write-Host "Validating critical environment variables..."
        Write-Host ("NODE_ENV: {0}" -f ($env:NODE_ENV ?? 'not set'))
        Write-Host ("NPM_CONFIG_PRODUCTION: {0}" -f ($env:NPM_CONFIG_PRODUCTION ?? 'not set'))
        if ($env:NODE_ENV -ne 'development' -or $env:NPM_CONFIG_PRODUCTION -ne 'false') {
          Write-Warning "Environment vars may prevent devDependencies installation. Recommended: NODE_ENV=development, NPM_CONFIG_PRODUCTION=false"
        }

    - name: Hardened npm install with ESM support
      shell: pwsh
      working-directory: ${{ inputs.working-directory }}
      run: |
        Write-Host "Starting Windows-focused npm installation..."
        Write-Host ("Runner: {0}" -f $env:RUNNER_OS)
        Write-Host "Current npm configuration (subset):"
        try { npm config list | Select-String -Pattern 'fetch-retries|registry|fund|audit' -SimpleMatch | ForEach-Object { $_.Line } } catch {}

        # ESM-friendly npm environment variables
        $env:NPM_CONFIG_MAXSOCKETS = '8'
        $env:NPM_CONFIG_FUND = 'false'
        $env:NPM_CONFIG_AUDIT = 'false'
        $env:NPM_CONFIG_PROGRESS = 'false'

        # Additional hardened npm configs to improve reliability on Windows CI
        npm config set fund false --location=project | Out-Null
        npm config set audit false --location=project | Out-Null
        npm config set legacy-peer-deps true --location=project | Out-Null
        npm config set fetch-retries 5 --location=project | Out-Null
        npm config set fetch-retry-maxtimeout 600000 --location=project | Out-Null
        npm config set fetch-retry-mintimeout 20000 --location=project | Out-Null

        $npmExecutable = (Get-Command npm -ErrorAction Stop).Source
        if (-not $npmExecutable) {
          throw 'npm executable not found on PATH (required for npm ci)'
        }

        function Invoke-NpmCiAttempt([string]$extraArgs) {
          $global:LASTEXITCODE = 0
          Write-Host ("[npm-install] running: npm ci {0}" -f $extraArgs)
          npm ci $extraArgs 2>&1 | Tee-Object -FilePath npm_install.log -Append
          return @{ Ok = ($LASTEXITCODE -eq 0); TimedOut=$false; Code=$LASTEXITCODE }
        }

        $attempts = @(
          @{ Args='' },
          @{ Args='--maxsockets=5' },
          @{ Args='--maxsockets=1' },
          @{ Args='' }
        )

        $success = $false
        for ($i=0; $i -lt $attempts.Count; $i++) {
          $a = $attempts[$i]
          Write-Host ("Attempt {0} (args='{1}')" -f ($i+1), $a.Args)
          $res = Invoke-NpmCiAttempt -extraArgs $a.Args
          if ($res.Ok) { $success = $true; break } else {
            if ($i -lt ($attempts.Count-1)) {
              $sleep = 15 * ($i+1)
              Write-Warning ("Attempt {0} failed (code={1}, timeout={2}). Sleeping {3}s before retry..." -f ($i+1), $res.Code, $res.TimedOut, $sleep)
              Start-Sleep -Seconds $sleep
            }
          }
        }

        if (-not $success) {
          Write-Warning "npm ci failed after retries. Falling back to 'npm install'..."
          try {
            npm cache verify | Out-Null
          } catch {}
          $LASTEXITCODE = 0
          npm install --no-audit --fund=false --prefer-offline 2>&1 | Tee-Object -FilePath npm_install.log -Append
          if ($LASTEXITCODE -ne 0) {
            Write-Error "CRITICAL FAILURE: npm install fallback failed (exit=$LASTEXITCODE)"
            if (Test-Path npm_install.log) { Get-Content npm_install.log -Tail 120 | Write-Host }
            exit 1
          } else {
            $success = $true
            Write-Host "SUCCESS: npm install fallback completed"
          }
        }

        Write-Host "SUCCESS: npm ci completed"

        
        exit 0
branding:
  icon: 'download'
  color: 'green'

