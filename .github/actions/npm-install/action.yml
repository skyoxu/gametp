name: 'Windows-Focused npm Install'
description: 'Optimized npm installation for Windows-based CI/CD systems (lean/full modes with logs)'
author: 'CI/CD Team'

inputs:
  working-directory:
    description: 'Working directory'
    required: false
    default: '.'
  node-version:
    description: 'Node.js version'
    required: false
    default: '22.x'
  mode:
    description: 'Install mode: lean or full'
    required: false
    default: ''

outputs:
  logs-dir:
    description: 'Logs directory for this run'
    value: ${{ steps.meta.outputs.logs-dir }}
  mode:
    description: 'Resolved install mode'
    value: ${{ steps.meta.outputs.mode }}

runs:
  using: 'composite'
  steps:
    - name: Validate Node.js environment
      shell: pwsh
      working-directory: ${{ inputs.working-directory }}
      run: |
        Write-Host "Validating Node.js environment setup..."
        if (-not (Get-Command node -ErrorAction SilentlyContinue)) {
          Write-Error "Node.js not found. Ensure actions/setup-node has run."
          exit 1
        }
        if (-not (Get-Command npm -ErrorAction SilentlyContinue)) {
          Write-Error "npm not found. Node.js installation may be incomplete."
          exit 1
        }
        Write-Host ("Node.js version: {0}" -f (node --version))
        Write-Host ("npm version: {0}" -f (npm --version))

    - name: Compute logs dir and mode
      id: meta
      shell: pwsh
      working-directory: ${{ inputs.working-directory }}
      run: |
        $d = Get-Date -Format 'yyyy-MM-dd'
        $logs = "logs/$d/npm-install"
        New-Item -ItemType Directory -Force -Path $logs | Out-Null
        "logs-dir=$logs" | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8
        # Decide mode: explicit input > tag/production dispatch > lean
        $modeIn = '${{ inputs.mode }}'
        $isTag = ($env:GITHUB_REF_TYPE -eq 'tag')
        $isProdDispatch = ($env:GITHUB_EVENT_NAME -eq 'workflow_dispatch' -and $env:INPUT_ENVIRONMENT -eq 'production')
        $mode = if ($modeIn -ne '') { $modeIn } elseif ($isTag -or $isProdDispatch) { 'full' } else { 'lean' }
        "mode=$mode" | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8
        Write-Host ("[npm-install] logs: {0} | mode: {1}" -f $logs, $mode)

    - name: Install via Node helper (lean/full)
      shell: pwsh
      working-directory: ${{ inputs.working-directory }}
      run: |
        $mode = '${{ steps.meta.outputs.mode }}'
        Write-Host ("[npm-install] invoking Node helper (mode={0})" -f $mode)
        node scripts/ci/npm-install.mjs --cwd . --mode $mode
        $code = $LASTEXITCODE
        if ($code -ne 0) {
          $logs = '${{ steps.meta.outputs.logs-dir }}'
          $p = Join-Path $logs 'npm-install.log'
          if ($env:GITHUB_STEP_SUMMARY) {
            $lines = @()
            $lines += "## npm-install failed"
            $lines += ("- Logs: {0}" -f $p)
            $lines += ("- Mode: {0}" -f $mode)
            $lines -join "`n" | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append -Encoding utf8
          }
          Write-Error ("npm-install failed (exit={0}). See {1}" -f $code, $p)
          exit $code
        }

    - name: Ensure Rollup native package (win32-x64)
      shell: pwsh
      working-directory: ${{ inputs.working-directory }}
      run: |
        Write-Host "Checking @rollup/rollup-win32-x64-msvc availability..."
        node -e "require('@rollup/rollup-win32-x64-msvc')" 2>$null
        if ($LASTEXITCODE -ne 0) {
          Write-Warning "@rollup/rollup-win32-x64-msvc missing; installing no-save..."
          npm install @rollup/rollup-win32-x64-msvc --no-save --no-audit --fund=false
        } else {
          Write-Host "Rollup native package available."
        }

branding:
  icon: 'download'
  color: 'green'
