name: 'Windows-Focused npm Install'
description: 'Optimized npm installation for Windows-based CI/CD systems (lean/full modes with logs)'
author: 'CI/CD Team'

inputs:
  working-directory:
    description: 'Working directory'
    required: false
    default: '.'
  node-version:
    description: 'Node.js version'
    required: false
    default: '20.x'
  mode:
    description: 'Install mode: lean or full'
    required: false
    default: ''

outputs:
  logs-dir:
    description: 'Logs directory for this run'
    value: ${{ steps.meta.outputs.logs-dir }}
  mode:
    description: 'Resolved install mode'
    value: ${{ steps.meta.outputs.mode }}

runs:
  using: 'composite'
  steps:
    - name: Validate Node.js environment
      shell: pwsh
      working-directory: ${{ inputs.working-directory }}
      run: |
        Write-Host "Validating Node.js environment setup..."
        if (-not (Get-Command node -ErrorAction SilentlyContinue)) {
          Write-Error "Node.js not found. Ensure actions/setup-node has run."
          exit 1
        }
        if (-not (Get-Command npm -ErrorAction SilentlyContinue)) {
          Write-Error "npm not found. Node.js installation may be incomplete."
          exit 1
        }
        Write-Host ("Node.js version: {0}" -f (node --version))
        Write-Host ("npm version: {0}" -f (npm --version))

    - name: Compute logs dir and mode
      id: meta
      shell: pwsh
      working-directory: ${{ inputs.working-directory }}
      run: |
        $d = Get-Date -Format 'yyyy-MM-dd'
        $logs = "logs/$d/npm-install"
        New-Item -ItemType Directory -Force -Path $logs | Out-Null
        "logs-dir=$logs" | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8
        # Decide mode: explicit input > tag/production dispatch > lean
        $modeIn = '${{ inputs.mode }}'
        $isTag = ($env:GITHUB_REF_TYPE -eq 'tag')
        $isProdDispatch = ($env:GITHUB_EVENT_NAME -eq 'workflow_dispatch' -and $env:INPUT_ENVIRONMENT -eq 'production')
        $mode = if ($modeIn -ne '') { $modeIn } elseif ($isTag -or $isProdDispatch) { 'full' } else { 'lean' }
        "mode=$mode" | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8
        Write-Host ("[npm-install] logs: {0} | mode: {1}" -f $logs, $mode)

    - name: Install (lean/full with retries)
      shell: pwsh
      working-directory: ${{ inputs.working-directory }}
      run: |
        $mode = '${{ steps.meta.outputs.mode }}'
        $logs = '${{ steps.meta.outputs.logs-dir }}'
        $logFile = Join-Path $logs 'npm_install.log'
        Write-Host ("Starting npm install (mode={0})..." -f $mode)
        # Baseline npm environment
        $env:NPM_CONFIG_MAXSOCKETS = '8'
        $env:NPM_CONFIG_FUND = 'false'
        $env:NPM_CONFIG_AUDIT = 'false'
        $env:NPM_CONFIG_PROGRESS = 'false'
        npm config set fund false --location=project | Out-Null
        npm config set audit false --location=project | Out-Null
        npm config set legacy-peer-deps true --location=project | Out-Null
        npm config set fetch-retries 5 --location=project | Out-Null
        npm config set fetch-retry-maxtimeout 600000 --location=project | Out-Null
        npm config set fetch-retry-mintimeout 20000 --location=project | Out-Null

        function Invoke-Cmd([string]$cmdline) {
          $global:LASTEXITCODE = 0
          Write-Host ("[npm-install] running: {0}" -f $cmdline)
          cmd /c $cmdline 2>&1 | Tee-Object -FilePath $logFile -Append
          return $LASTEXITCODE
        }

        $attempts = @('', '--maxsockets=5', '--maxsockets=1', '')
        $success = $false
        $start = Get-Date

        if ($mode -eq 'full') {
          for ($i=0; $i -lt $attempts.Count; $i++) {
            $args = $attempts[$i]
            $code = Invoke-Cmd ("npm ci {0}" -f $args)
            if ($code -eq 0) { $success = $true; break }
            if ($i -lt ($attempts.Count-1)) {
              $sleep = 15 * ($i+1)
              Write-Warning ("Attempt {0} failed (code={1}). Sleeping {2}s..." -f ($i+1), $code, $sleep)
              Start-Sleep -Seconds $sleep
            }
          }
          if (-not $success) {
            Write-Warning "npm ci failed after retries. Falling back to 'npm install' (full)..."
            $code = Invoke-Cmd "npm install --no-audit --fund=false --prefer-offline"
            if ($code -ne 0) { Write-Error "npm install fallback failed (exit=$code)"; exit $code } else { $success = $true }
          }
        } else {
          # lean mode: ignore-scripts and omit optional to avoid heavy postinstalls
          for ($i=0; $i -lt $attempts.Count; $i++) {
            $args = $attempts[$i]
            $code = Invoke-Cmd ("npm ci --ignore-scripts --omit=optional {0}" -f $args)
            if ($code -eq 0) { $success = $true; break }
            if ($i -lt ($attempts.Count-1)) {
              $sleep = 15 * ($i+1)
              Write-Warning ("Attempt {0} failed (code={1}). Sleeping {2}s..." -f ($i+1), $code, $sleep)
              Start-Sleep -Seconds $sleep
            }
          }
          if (-not $success) {
            Write-Warning "npm ci (lean) failed. Falling back to 'npm install --ignore-scripts --omit=optional'..."
            $code = Invoke-Cmd "npm install --ignore-scripts --omit=optional --no-audit --fund=false --prefer-offline"
            if ($code -ne 0) { Write-Error "npm install fallback (lean) failed (exit=$code)"; exit $code } else { $success = $true }
          }
        }

        $dur = [int]((Get-Date) - $start).TotalSeconds
        Write-Host ("SUCCESS: npm install completed (mode={0}) in {1}s" -f $mode, $dur)
        if ($env:GITHUB_OUTPUT) { "install_duration_seconds=$dur" | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8 }
        exit 0

branding:
  icon: 'download'
  color: 'green'

