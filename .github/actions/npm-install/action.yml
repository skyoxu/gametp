name: 'Windows-Focused npm Install'
description: 'Optimized npm installation for Windows-based CI/CD systems'
author: 'CI/CD Team'

inputs:
  working-directory:
    description: 'Working directory'
    required: false
    default: '.'
  node-version:
    description: 'Node.js version'
    required: false
    default: '20.x'

# Outputs removed to avoid referencing non-existent step IDs
# Use npm --version and node --version if version info is needed

runs:
  using: 'composite'
  steps:
    - name: Validate Node.js environment
      shell: pwsh
      working-directory: ${{ inputs.working-directory }}
      run: |
        Write-Host "Validating Node.js environment setup..."
        if (-not (Get-Command node -ErrorAction SilentlyContinue)) {
          Write-Error "Node.js not found. Ensure actions/setup-node has run."
          exit 1
        }
        if (-not (Get-Command npm -ErrorAction SilentlyContinue)) {
          Write-Error "npm not found. Node.js installation may be incomplete."
          exit 1
        }
        Write-Host ("Node.js version: {0}" -f (node --version))
        Write-Host ("npm version: {0}" -f (npm --version))

    - name: Validate environment variables
      shell: pwsh
      working-directory: ${{ inputs.working-directory }}
      run: |
        Write-Host "Validating critical environment variables..."
        Write-Host ("NODE_ENV: {0}" -f ($env:NODE_ENV ?? 'not set'))
        Write-Host ("NPM_CONFIG_PRODUCTION: {0}" -f ($env:NPM_CONFIG_PRODUCTION ?? 'not set'))
        if ($env:NODE_ENV -ne 'development' -or $env:NPM_CONFIG_PRODUCTION -ne 'false') {
          Write-Warning "Environment vars may prevent devDependencies installation. Recommended: NODE_ENV=development, NPM_CONFIG_PRODUCTION=false"
        }

    - name: Hardened npm install with ESM support
      shell: pwsh
      working-directory: ${{ inputs.working-directory }}
      run: |
        Write-Host "Starting Windows-focused npm installation..."
        Write-Host ("Runner: {0}" -f $env:RUNNER_OS)
        Write-Host "Current npm configuration (subset):"
        try { npm config list | Select-String -Pattern 'fetch-retries|registry|fund|audit' -SimpleMatch | ForEach-Object { $_.Line } } catch {}

        # ESM-friendly npm environment variables
        $env:NPM_CONFIG_MAXSOCKETS = '8'
        $env:NPM_CONFIG_FUND = 'false'
        $env:NPM_CONFIG_AUDIT = 'false'
        $env:NPM_CONFIG_PROGRESS = 'false'

        $npmExecutable = (Get-Command npm -ErrorAction Stop).Source
        if (-not $npmExecutable) {
          throw 'npm executable not found on PATH (required for npm ci)'
        }

        function Invoke-NpmCiAttempt([int]$timeoutSec, [string]$extraArgs) {
          $psi = New-Object System.Diagnostics.ProcessStartInfo
          $psi.FileName = $npmExecutable
          $psi.WorkingDirectory = (Get-Location).Path
          $psi.Arguments = "ci $extraArgs"
          $psi.RedirectStandardOutput = $true
          $psi.RedirectStandardError = $true
          $psi.UseShellExecute = $false
          $psi.CreateNoWindow = $true
          $proc = New-Object System.Diagnostics.Process
          $proc.StartInfo = $psi
          [void]$proc.Start()
          $completed = $proc.WaitForExit($timeoutSec * 1000)
          $out = $proc.StandardOutput.ReadToEnd()
          $err = $proc.StandardError.ReadToEnd()
          ($out + $err) | Out-File -FilePath npm_install.log -Append -Encoding UTF8
          if (-not $completed) { try { Stop-Process -Id $proc.Id -Force -ErrorAction SilentlyContinue } catch {}; return @{ Ok=$false; TimedOut=$true; Code=-1 } }
          return @{ Ok = ($proc.ExitCode -eq 0); TimedOut=$false; Code=$proc.ExitCode }
        }

        $attempts = @(
          @{ Timeout=480; Args='' },
          @{ Timeout=720; Args='--maxsockets=5' },
          @{ Timeout=900; Args='--maxsockets=1' },
          @{ Timeout=900; Args='' }
        )

        $success = $false
        for ($i=0; $i -lt $attempts.Count; $i++) {
          $a = $attempts[$i]
          Write-Host ("Attempt {0} (timeout={1}s args='{2}')" -f ($i+1), $a.Timeout, $a.Args)
          $res = Invoke-NpmCiAttempt -timeoutSec $a.Timeout -extraArgs $a.Args
          if ($res.Ok) { $success = $true; break } else {
            if ($i -lt ($attempts.Count-1)) {
              $sleep = 15 * ($i+1)
              Write-Warning ("Attempt {0} failed (code={1}, timeout={2}). Sleeping {3}s before retry..." -f ($i+1), $res.Code, $res.TimedOut, $sleep)
              Start-Sleep -Seconds $sleep
            }
          }
        }

        if (-not $success) {
          Write-Error "CRITICAL FAILURE: All Windows installation attempts failed!"
          if (Test-Path npm_install.log) { Get-Content npm_install.log -Tail 80 | Write-Host }
          exit 1
        }

        Write-Host "SUCCESS: npm ci completed"

        # Verification
        $verificationErrors = 0
        $tools = @('eslint','tsc','vitest','playwright','tsx')
        foreach ($t in $tools) {
          if (Test-Path (Join-Path 'node_modules/.bin' $t) -or Test-Path (Join-Path 'node_modules/.bin' ("{0}.cmd" -f $t))) {
            Write-Host ("SUCCESS: {0} available in node_modules/.bin" -f $t)
          } elseif ((npm list $t | Out-Null) -ne $true) {
            Write-Warning ("{0} not detected in node_modules" -f $t)
            $verificationErrors++
          }
        }

        Write-Host "Verifying Rollup native platform package for Windows..."
        node -e "require('@rollup/rollup-win32-x64-msvc')" 2>$null
        if ($LASTEXITCODE -eq 0) { Write-Host "SUCCESS: rollup native ok" } else { Write-Warning "rollup native package not found (non-critical)" }

        if (Test-Path 'node_modules' -and Test-Path 'node_modules/.bin') {
          $pkgCount = (Get-ChildItem 'node_modules' -Directory | Measure-Object).Count
          Write-Host ("SUCCESS: node_modules verification passed ({0} top-level packages)" -f $pkgCount)
        } else {
          Write-Error 'node_modules structure verification failed'
          $verificationErrors++
        }

        try {
          $pkg = Get-Content package.json -Raw | ConvertFrom-Json
          if ($pkg.type -eq 'module') { Write-Host 'SUCCESS: ESM module system verification passed' }
        } catch {}

        if ($verificationErrors -gt 0) { Write-Warning ("Found {0} verification issues (non-blocking)" -f $verificationErrors) }

branding:
  icon: 'download'
  color: 'green'
